/**
 * Archivo de pruebas para validar los indicadores t√©cnicos
 * Ejecutar con: npx ts-node test-technical-indicators.ts
 */

import { TechnicalIndicators, PriceData } from './src/helpers/technical-indicators';

// Datos de ejemplo para pruebas (simulando precios de Bitcoin)
const testPriceData: PriceData[] = [
    // Datos simulados de 250 per√≠odos con tendencia alcista y volatilidad
    ...Array.from({ length: 250 }, (_, i) => {
        const basePrice = 30000;
        const trend = i * 100; // Tendencia alcista
        const noise = Math.sin(i * 0.1) * 2000; // Volatilidad
        const randomNoise = (Math.random() - 0.5) * 1000;
        
        const close = basePrice + trend + noise + randomNoise;
        const high = close + Math.random() * 500;
        const low = close - Math.random() * 500;
        
        return {
            close: Math.max(close, 1000), // Evitar precios negativos
            high: Math.max(high, close),
            low: Math.min(low, close),
            volume: 1000 + Math.random() * 5000
        };
    })
];

console.log('üöÄ Iniciando pruebas de indicadores t√©cnicos...\n');

// Test 1: RSI
console.log('üìà Prueba 1: RSI (Relative Strength Index)');
try {
    const closes = testPriceData.map(d => d.close);
    const rsi = TechnicalIndicators.calculateRSI(closes);
    
    console.log(`  ‚úÖ RSI calculado exitosamente:`);
    console.log(`     Valor: ${rsi.rsi.toFixed(2)}`);
    console.log(`     Se√±al: ${rsi.signal}`);
    console.log(`     Fuerza: ${rsi.strength}`);
    console.log(`     Interpretaci√≥n: ${rsi.rsi >= 70 ? 'Sobrecomprado' : rsi.rsi <= 30 ? 'Sobrevendido' : 'Neutral'}\n`);
} catch (error) {
    console.error(`  ‚ùå Error en RSI: ${error.message}\n`);
}

// Test 2: MACD
console.log('üìä Prueba 2: MACD (Moving Average Convergence Divergence)');
try {
    const closes = testPriceData.map(d => d.close);
    const macd = TechnicalIndicators.calculateMACD(closes);
    
    console.log(`  ‚úÖ MACD calculado exitosamente:`);
    console.log(`     L√≠nea MACD: ${macd.macd.toFixed(4)}`);
    console.log(`     L√≠nea Se√±al: ${macd.signal.toFixed(4)}`);
    console.log(`     Histograma: ${macd.histogram.toFixed(4)}`);
    console.log(`     Tendencia: ${macd.trend}`);
    console.log(`     Cruce: ${macd.crossover}\n`);
} catch (error) {
    console.error(`  ‚ùå Error en MACD: ${error.message}\n`);
}

// Test 3: Medias M√≥viles
console.log('üìâ Prueba 3: Medias M√≥viles (SMA y EMA)');
try {
    const closes = testPriceData.map(d => d.close);
    
    // Probar diferentes per√≠odos
    const periods = [20, 50, 200];
    
    for (const period of periods) {
        if (closes.length >= period) {
            const ma = TechnicalIndicators.calculateMovingAverages(closes, period);
            console.log(`  ‚úÖ MA${period} calculadas exitosamente:`);
            console.log(`     SMA: $${ma.sma.toFixed(2)}`);
            console.log(`     EMA: $${ma.ema.toFixed(2)}`);
            console.log(`     Tendencia: ${ma.trend}`);
            console.log(`     Posici√≥n: ${ma.position}`);
        }
    }
    console.log('');
} catch (error) {
    console.error(`  ‚ùå Error en Medias M√≥viles: ${error.message}\n`);
}

// Test 4: An√°lisis T√©cnico Completo
console.log('üéØ Prueba 4: An√°lisis T√©cnico Completo');
try {
    const analysis = TechnicalIndicators.performCompleteAnalysis(testPriceData, 'TEST-USDT');
    
    console.log(`  ‚úÖ An√°lisis completo exitoso:`);
    console.log(`     S√≠mbolo: ${analysis.symbol}`);
    console.log(`     Precio Actual: $${analysis.currentPrice.toFixed(2)}`);
    console.log(`     Se√±al Global: ${analysis.overallSignal}`);
    console.log(`     Confianza: ${analysis.confidence}%`);
    console.log(`     RSI: ${analysis.rsi.rsi.toFixed(2)} (${analysis.rsi.signal})`);
    console.log(`     MACD Tendencia: ${analysis.macd.trend}`);
    console.log(`     MA20 Posici√≥n: ${analysis.movingAverages.ma20.position}`);
    console.log(`     MA50 Tendencia: ${analysis.movingAverages.ma50.trend}`);
    console.log(`     MA200 Tendencia: ${analysis.movingAverages.ma200.trend}\n`);
} catch (error) {
    console.error(`  ‚ùå Error en An√°lisis Completo: ${error.message}\n`);
}

// Test 5: Casos extremos y validaci√≥n
console.log('üîç Prueba 5: Validaci√≥n de casos extremos');

// Test con datos insuficientes
console.log('  üß™ Probando con datos insuficientes...');
try {
    const shortData = testPriceData.slice(0, 10);
    TechnicalIndicators.performCompleteAnalysis(shortData, 'SHORT-TEST');
    console.log('  ‚ùå Deber√≠a haber fallado con datos insuficientes');
} catch (error) {
    console.log(`  ‚úÖ Correctamente rechaz√≥ datos insuficientes: ${error.message}`);
}

// Test con precios extremos
console.log('  üß™ Probando con precios extremos...');
try {
    const extremeData: PriceData[] = [
        ...testPriceData.slice(0, 200),
        // Agregar algunos valores extremos
        { close: 1000000, high: 1100000, low: 900000, volume: 1000 },
        { close: 1, high: 2, low: 0.5, volume: 1000 },
        ...testPriceData.slice(202, 250)
    ];
    
    const extremeAnalysis = TechnicalIndicators.performCompleteAnalysis(extremeData, 'EXTREME-TEST');
    console.log(`  ‚úÖ Manej√≥ precios extremos exitosamente (Se√±al: ${extremeAnalysis.overallSignal})`);
} catch (error) {
    console.log(`  ‚ö†Ô∏è  Error con precios extremos: ${error.message}`);
}

console.log('üéâ Pruebas completadas!\n');

// Test 6: Benchmarking de rendimiento
console.log('‚ö° Prueba 6: Benchmark de rendimiento');
const startTime = Date.now();

try {
    // Ejecutar an√°lisis m√∫ltiples veces para medir rendimiento
    const iterations = 100;
    console.log(`  üèÉ Ejecutando ${iterations} an√°lisis completos...`);
    
    for (let i = 0; i < iterations; i++) {
        TechnicalIndicators.performCompleteAnalysis(testPriceData, `BENCH-${i}`);
    }
    
    const endTime = Date.now();
    const totalTime = endTime - startTime;
    const avgTime = totalTime / iterations;
    
    console.log(`  ‚úÖ Rendimiento:`);
    console.log(`     Tiempo total: ${totalTime}ms`);
    console.log(`     Tiempo promedio por an√°lisis: ${avgTime.toFixed(2)}ms`);
    console.log(`     An√°lisis por segundo: ${(1000 / avgTime).toFixed(2)}`);
} catch (error) {
    console.error(`  ‚ùå Error en benchmark: ${error.message}`);
}

console.log('\nüìã Resumen de pruebas:');
console.log('  ‚Ä¢ RSI: C√°lculo de momentum y detecci√≥n de sobrecompra/sobreventa');
console.log('  ‚Ä¢ MACD: An√°lisis de convergencia/divergencia y cruces de se√±ales');
console.log('  ‚Ä¢ Medias M√≥viles: Identificaci√≥n de tendencias (EMA m√°s reactiva que SMA)');
console.log('  ‚Ä¢ An√°lisis Completo: Combinaci√≥n inteligente de todos los indicadores');
console.log('  ‚Ä¢ Validaci√≥n: Manejo robusto de casos extremos y datos insuficientes');
console.log('  ‚Ä¢ Rendimiento: Optimizado para an√°lisis en tiempo real');

console.log('\nüîß Para usar en el MCP Server:');
console.log('  1. Compilar: npm run build');
console.log('  2. Ejecutar: npm start');
console.log('  3. Usar herramienta: get_technical_analysis');
console.log('  4. Par√°metros: symbol, interval, periods');

console.log('\nüéØ Casos de uso recomendados:');
console.log('  ‚Ä¢ Day Trading: RSI + EMA20 para entradas r√°pidas');
console.log('  ‚Ä¢ Swing Trading: MACD crossovers + EMA50 para tendencias medias');
console.log('  ‚Ä¢ Inversi√≥n LP: EMA200 + an√°lisis completo para contexto general');
console.log('  ‚Ä¢ Gesti√≥n de Riesgo: Confidence level para ajustar tama√±o de posici√≥n');

console.log('\n‚ú® ¬°Indicadores t√©cnicos listos para trading profesional!');
